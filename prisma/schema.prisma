generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  budget                Decimal?               @default(0)
  isTwoFactorEnable     Boolean                @default(false)
  accounts              Account[]
  categories            Category[]
  incomes               Income[]
  expenses              Expense[]
  twoFactorConfirmation TwoFactorConfirmation?
  pushSubscriptions     PushSubscription[]
  createdGroups         Group[]                @relation("GroupCreator")
  groupMemberships      GroupMember[]
  joinRequests          JoinRequest[]
  paidExpenses         GroupExpense[] @relation("PaidExpenses")
  expenseSplits        ExpenseSplit[] @relation("ExpenseSplits")
  recurringTransactions RecurringTransaction[]
  reminders            Reminder[]

  @@index([email])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Category {
  id       String        @id @default(cuid())
  userId   String
  category CategoryTypes
  budget   Decimal
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, category])
}

model Income {
  id          String   @id @default(cuid())
  userId      String
  amount      Decimal
  date        DateTime
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}

model Expense {
  id          String        @id @default(cuid())
  userId      String
  category    CategoryTypes
  amount      Decimal
  date        DateTime
  description String?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, category, date])
}

model Tokens {
  id      String     @id @default(cuid())
  email   String
  token   String     @unique
  expires DateTime
  type    TokenTypes

  @@unique([email, token, type])
  @@index([email, type])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushSubscription {
  id           String   @id @default(cuid())
  userId       String
  endpoint     String   @unique
  auth         String
  p256dh       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  photo       String?
  code        String        @unique
  creatorId   String
  creator     User          @relation("GroupCreator", fields: [creatorId], references: [id])
  members     GroupMember[]
  joinRequests JoinRequest[]
  expenses    GroupExpense[]

  @@index([creatorId])
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model JoinRequest {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  status    JoinRequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([groupId, status])
}

model GroupExpense {
  id          String        @id @default(cuid())
  groupId     String
  paidById    String
  category    CategoryTypes?
  amount      Decimal
  description String
  date        DateTime
  status      ExpenseStatus @default(UNSETTLED)

  createdAt   DateTime      @default(now())
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidBy      User          @relation("PaidExpenses", fields: [paidById], references: [id], onDelete: Cascade)
  splits      ExpenseSplit[]

  @@index([groupId, date])
  @@index([paidById])
}

model ExpenseSplit {
  id          String       @id @default(cuid())
  expenseId   String
  userId      String
  amount      Decimal     @default(0)
  isPaid      SplitStatus @default(UNPAID)
  expense     GroupExpense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User         @relation("ExpenseSplits", fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]

  @@unique([expenseId, userId])
  @@index([userId])
}

model Payment {
  id            String       @id @default(cuid())
  expenseSplitId String
  amount        Decimal
  paidAt        DateTime     @default(now())
  expenseSplit  ExpenseSplit @relation(fields: [expenseSplitId], references: [id], onDelete: Cascade)
  
  @@index([expenseSplitId])
}

model Reminder {
  id            String           @id @default(cuid())
  userId        String
  title         String
  amount        Decimal
  description   String
  dueDate       DateTime
  type          TransactionType
  category      CategoryTypes?  
  status        ReminderStatus  @default(PENDING)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dueDate])
  @@index([userId, status])
  @@map("reminders")
}

model RecurringTransaction {
  id            String             @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Decimal
  title         String
  description   String?
  category      CategoryTypes?     
  startDate     DateTime
  endDate       DateTime?          
  frequency     RecurringFrequency
  customInterval Int? 
  reminderEnabled Boolean
  isActive      Boolean            @default(true)
  lastProcessed DateTime?          // To track when the last transaction was created
  nextOccurrence DateTime          // Next date when transaction should occur
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, type])
  @@index([userId, isActive])
  @@index([nextOccurrence])
  @@map("recurring_transactions")
}

enum SplitStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
}

enum ExpenseStatus {
  UNSETTLED
  PARTIALLY_SETTLED
  SETTLED
  CANCELLED
}

enum JoinRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum CategoryTypes {
  Other
  Bills
  Food
  Entertainment
  Transportation
  EMI
  Healthcare
  Education
  Investment
  Shopping
  Fuel
  Groceries
}

enum TokenTypes {
  EmailVerification
  PasswordReset
  TwoFactor
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringFrequency {
  DAILY
  CUSTOM
  WEEKLY
  MONTHLY
  YEARLY
}

enum ReminderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

