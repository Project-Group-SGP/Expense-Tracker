generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  budget                Decimal?               @default(0)
  isTwoFactorEnable     Boolean                @default(false)
  accounts              Account[]
  categories            Category[]
  expenses              Expense[]
  Income                Income[]
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id       String        @id @default(cuid())
  userId   String
  category CategoryTypes
  budget   Decimal
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Income {
  id          String   @id @default(cuid())
  userId      String
  amount      Decimal
  date        DateTime
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String        @id @default(cuid())
  userId      String
  category    CategoryTypes
  amount      Decimal
  date        DateTime
  description String?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Tokens {
  id      String     @id @default(cuid())
  email   String
  token   String     @unique
  expires DateTime
  type    TokenTypes

  @@unique([email, token, type])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CategoryTypes {
  Other
  Bills
  Food
  Entertainment
  Transportation
  EMI
  Healthcare
  Education
  Investment
  Shopping
  Fuel
  Groceries
}

enum TokenTypes {
  EmailVerification
  PasswordReset
  TwoFactor
}
